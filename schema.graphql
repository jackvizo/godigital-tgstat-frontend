schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar _int8

scalar _text

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

input cohort_analysis_args {
  end_date: date
  start_date: date
  tg_channel_ids: _int8
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "fn_cohort_analysis"
"""
type fn_cohort_analysis {
  join_date: date
  joined_count: bigint
  left_count: bigint
  left_date: date
}

type fn_cohort_analysis_aggregate {
  aggregate: fn_cohort_analysis_aggregate_fields
  nodes: [fn_cohort_analysis!]!
}

"""
aggregate fields of "fn_cohort_analysis"
"""
type fn_cohort_analysis_aggregate_fields {
  avg: fn_cohort_analysis_avg_fields
  count(columns: [fn_cohort_analysis_select_column!], distinct: Boolean): Int!
  max: fn_cohort_analysis_max_fields
  min: fn_cohort_analysis_min_fields
  stddev: fn_cohort_analysis_stddev_fields
  stddev_pop: fn_cohort_analysis_stddev_pop_fields
  stddev_samp: fn_cohort_analysis_stddev_samp_fields
  sum: fn_cohort_analysis_sum_fields
  var_pop: fn_cohort_analysis_var_pop_fields
  var_samp: fn_cohort_analysis_var_samp_fields
  variance: fn_cohort_analysis_variance_fields
}

"""aggregate avg on columns"""
type fn_cohort_analysis_avg_fields {
  joined_count: Float
  left_count: Float
}

"""
Boolean expression to filter rows from the table "fn_cohort_analysis". All fields are combined with a logical 'AND'.
"""
input fn_cohort_analysis_bool_exp {
  _and: [fn_cohort_analysis_bool_exp!]
  _not: fn_cohort_analysis_bool_exp
  _or: [fn_cohort_analysis_bool_exp!]
  join_date: date_comparison_exp
  joined_count: bigint_comparison_exp
  left_count: bigint_comparison_exp
  left_date: date_comparison_exp
}

"""aggregate max on columns"""
type fn_cohort_analysis_max_fields {
  join_date: date
  joined_count: bigint
  left_count: bigint
  left_date: date
}

"""aggregate min on columns"""
type fn_cohort_analysis_min_fields {
  join_date: date
  joined_count: bigint
  left_count: bigint
  left_date: date
}

"""Ordering options when selecting data from "fn_cohort_analysis"."""
input fn_cohort_analysis_order_by {
  join_date: order_by
  joined_count: order_by
  left_count: order_by
  left_date: order_by
}

"""
select columns of table "fn_cohort_analysis"
"""
enum fn_cohort_analysis_select_column {
  """column name"""
  join_date

  """column name"""
  joined_count

  """column name"""
  left_count

  """column name"""
  left_date
}

"""aggregate stddev on columns"""
type fn_cohort_analysis_stddev_fields {
  joined_count: Float
  left_count: Float
}

"""aggregate stddev_pop on columns"""
type fn_cohort_analysis_stddev_pop_fields {
  joined_count: Float
  left_count: Float
}

"""aggregate stddev_samp on columns"""
type fn_cohort_analysis_stddev_samp_fields {
  joined_count: Float
  left_count: Float
}

"""
Streaming cursor of the table "fn_cohort_analysis"
"""
input fn_cohort_analysis_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: fn_cohort_analysis_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input fn_cohort_analysis_stream_cursor_value_input {
  join_date: date
  joined_count: bigint
  left_count: bigint
  left_date: date
}

"""aggregate sum on columns"""
type fn_cohort_analysis_sum_fields {
  joined_count: bigint
  left_count: bigint
}

"""aggregate var_pop on columns"""
type fn_cohort_analysis_var_pop_fields {
  joined_count: Float
  left_count: Float
}

"""aggregate var_samp on columns"""
type fn_cohort_analysis_var_samp_fields {
  joined_count: Float
  left_count: Float
}

"""aggregate variance on columns"""
type fn_cohort_analysis_variance_fields {
  joined_count: Float
  left_count: Float
}

"""
columns and relationships of "fn_get_avg_user_lifecycle"
"""
type fn_get_avg_user_lifecycle {
  avg_lifecycle_days: float8
}

"""
aggregated selection of "fn_get_avg_user_lifecycle"
"""
type fn_get_avg_user_lifecycle_aggregate {
  aggregate: fn_get_avg_user_lifecycle_aggregate_fields
  nodes: [fn_get_avg_user_lifecycle!]!
}

"""
aggregate fields of "fn_get_avg_user_lifecycle"
"""
type fn_get_avg_user_lifecycle_aggregate_fields {
  avg: fn_get_avg_user_lifecycle_avg_fields
  count(columns: [fn_get_avg_user_lifecycle_select_column!], distinct: Boolean): Int!
  max: fn_get_avg_user_lifecycle_max_fields
  min: fn_get_avg_user_lifecycle_min_fields
  stddev: fn_get_avg_user_lifecycle_stddev_fields
  stddev_pop: fn_get_avg_user_lifecycle_stddev_pop_fields
  stddev_samp: fn_get_avg_user_lifecycle_stddev_samp_fields
  sum: fn_get_avg_user_lifecycle_sum_fields
  var_pop: fn_get_avg_user_lifecycle_var_pop_fields
  var_samp: fn_get_avg_user_lifecycle_var_samp_fields
  variance: fn_get_avg_user_lifecycle_variance_fields
}

"""aggregate avg on columns"""
type fn_get_avg_user_lifecycle_avg_fields {
  avg_lifecycle_days: Float
}

"""
Boolean expression to filter rows from the table "fn_get_avg_user_lifecycle". All fields are combined with a logical 'AND'.
"""
input fn_get_avg_user_lifecycle_bool_exp {
  _and: [fn_get_avg_user_lifecycle_bool_exp!]
  _not: fn_get_avg_user_lifecycle_bool_exp
  _or: [fn_get_avg_user_lifecycle_bool_exp!]
  avg_lifecycle_days: float8_comparison_exp
}

"""aggregate max on columns"""
type fn_get_avg_user_lifecycle_max_fields {
  avg_lifecycle_days: float8
}

"""aggregate min on columns"""
type fn_get_avg_user_lifecycle_min_fields {
  avg_lifecycle_days: float8
}

"""Ordering options when selecting data from "fn_get_avg_user_lifecycle"."""
input fn_get_avg_user_lifecycle_order_by {
  avg_lifecycle_days: order_by
}

"""
select columns of table "fn_get_avg_user_lifecycle"
"""
enum fn_get_avg_user_lifecycle_select_column {
  """column name"""
  avg_lifecycle_days
}

"""aggregate stddev on columns"""
type fn_get_avg_user_lifecycle_stddev_fields {
  avg_lifecycle_days: Float
}

"""aggregate stddev_pop on columns"""
type fn_get_avg_user_lifecycle_stddev_pop_fields {
  avg_lifecycle_days: Float
}

"""aggregate stddev_samp on columns"""
type fn_get_avg_user_lifecycle_stddev_samp_fields {
  avg_lifecycle_days: Float
}

"""
Streaming cursor of the table "fn_get_avg_user_lifecycle"
"""
input fn_get_avg_user_lifecycle_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: fn_get_avg_user_lifecycle_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input fn_get_avg_user_lifecycle_stream_cursor_value_input {
  avg_lifecycle_days: float8
}

"""aggregate sum on columns"""
type fn_get_avg_user_lifecycle_sum_fields {
  avg_lifecycle_days: float8
}

"""aggregate var_pop on columns"""
type fn_get_avg_user_lifecycle_var_pop_fields {
  avg_lifecycle_days: Float
}

"""aggregate var_samp on columns"""
type fn_get_avg_user_lifecycle_var_samp_fields {
  avg_lifecycle_days: Float
}

"""aggregate variance on columns"""
type fn_get_avg_user_lifecycle_variance_fields {
  avg_lifecycle_days: Float
}

"""
columns and relationships of "fn_unsubscribes_by_links"
"""
type fn_unsubscribes_by_links {
  invite_link: String
  joined_count: bigint
  left_count: bigint
}

"""
aggregated selection of "fn_unsubscribes_by_links"
"""
type fn_unsubscribes_by_links_aggregate {
  aggregate: fn_unsubscribes_by_links_aggregate_fields
  nodes: [fn_unsubscribes_by_links!]!
}

"""
aggregate fields of "fn_unsubscribes_by_links"
"""
type fn_unsubscribes_by_links_aggregate_fields {
  avg: fn_unsubscribes_by_links_avg_fields
  count(columns: [fn_unsubscribes_by_links_select_column!], distinct: Boolean): Int!
  max: fn_unsubscribes_by_links_max_fields
  min: fn_unsubscribes_by_links_min_fields
  stddev: fn_unsubscribes_by_links_stddev_fields
  stddev_pop: fn_unsubscribes_by_links_stddev_pop_fields
  stddev_samp: fn_unsubscribes_by_links_stddev_samp_fields
  sum: fn_unsubscribes_by_links_sum_fields
  var_pop: fn_unsubscribes_by_links_var_pop_fields
  var_samp: fn_unsubscribes_by_links_var_samp_fields
  variance: fn_unsubscribes_by_links_variance_fields
}

"""aggregate avg on columns"""
type fn_unsubscribes_by_links_avg_fields {
  joined_count: Float
  left_count: Float
}

"""
Boolean expression to filter rows from the table "fn_unsubscribes_by_links". All fields are combined with a logical 'AND'.
"""
input fn_unsubscribes_by_links_bool_exp {
  _and: [fn_unsubscribes_by_links_bool_exp!]
  _not: fn_unsubscribes_by_links_bool_exp
  _or: [fn_unsubscribes_by_links_bool_exp!]
  invite_link: String_comparison_exp
  joined_count: bigint_comparison_exp
  left_count: bigint_comparison_exp
}

"""aggregate max on columns"""
type fn_unsubscribes_by_links_max_fields {
  invite_link: String
  joined_count: bigint
  left_count: bigint
}

"""aggregate min on columns"""
type fn_unsubscribes_by_links_min_fields {
  invite_link: String
  joined_count: bigint
  left_count: bigint
}

"""Ordering options when selecting data from "fn_unsubscribes_by_links"."""
input fn_unsubscribes_by_links_order_by {
  invite_link: order_by
  joined_count: order_by
  left_count: order_by
}

"""
select columns of table "fn_unsubscribes_by_links"
"""
enum fn_unsubscribes_by_links_select_column {
  """column name"""
  invite_link

  """column name"""
  joined_count

  """column name"""
  left_count
}

"""aggregate stddev on columns"""
type fn_unsubscribes_by_links_stddev_fields {
  joined_count: Float
  left_count: Float
}

"""aggregate stddev_pop on columns"""
type fn_unsubscribes_by_links_stddev_pop_fields {
  joined_count: Float
  left_count: Float
}

"""aggregate stddev_samp on columns"""
type fn_unsubscribes_by_links_stddev_samp_fields {
  joined_count: Float
  left_count: Float
}

"""
Streaming cursor of the table "fn_unsubscribes_by_links"
"""
input fn_unsubscribes_by_links_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: fn_unsubscribes_by_links_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input fn_unsubscribes_by_links_stream_cursor_value_input {
  invite_link: String
  joined_count: bigint
  left_count: bigint
}

"""aggregate sum on columns"""
type fn_unsubscribes_by_links_sum_fields {
  joined_count: bigint
  left_count: bigint
}

"""aggregate var_pop on columns"""
type fn_unsubscribes_by_links_var_pop_fields {
  joined_count: Float
  left_count: Float
}

"""aggregate var_samp on columns"""
type fn_unsubscribes_by_links_var_samp_fields {
  joined_count: Float
  left_count: Float
}

"""aggregate variance on columns"""
type fn_unsubscribes_by_links_variance_fields {
  joined_count: Float
  left_count: Float
}

"""
columns and relationships of "fn_unsubscribes_by_periods"
"""
type fn_unsubscribes_by_periods {
  count: Int
  interval_label: String
  percentage: float8
}

"""
aggregated selection of "fn_unsubscribes_by_periods"
"""
type fn_unsubscribes_by_periods_aggregate {
  aggregate: fn_unsubscribes_by_periods_aggregate_fields
  nodes: [fn_unsubscribes_by_periods!]!
}

"""
aggregate fields of "fn_unsubscribes_by_periods"
"""
type fn_unsubscribes_by_periods_aggregate_fields {
  avg: fn_unsubscribes_by_periods_avg_fields
  count(columns: [fn_unsubscribes_by_periods_select_column!], distinct: Boolean): Int!
  max: fn_unsubscribes_by_periods_max_fields
  min: fn_unsubscribes_by_periods_min_fields
  stddev: fn_unsubscribes_by_periods_stddev_fields
  stddev_pop: fn_unsubscribes_by_periods_stddev_pop_fields
  stddev_samp: fn_unsubscribes_by_periods_stddev_samp_fields
  sum: fn_unsubscribes_by_periods_sum_fields
  var_pop: fn_unsubscribes_by_periods_var_pop_fields
  var_samp: fn_unsubscribes_by_periods_var_samp_fields
  variance: fn_unsubscribes_by_periods_variance_fields
}

"""aggregate avg on columns"""
type fn_unsubscribes_by_periods_avg_fields {
  count: Float
  percentage: Float
}

"""
Boolean expression to filter rows from the table "fn_unsubscribes_by_periods". All fields are combined with a logical 'AND'.
"""
input fn_unsubscribes_by_periods_bool_exp {
  _and: [fn_unsubscribes_by_periods_bool_exp!]
  _not: fn_unsubscribes_by_periods_bool_exp
  _or: [fn_unsubscribes_by_periods_bool_exp!]
  count: Int_comparison_exp
  interval_label: String_comparison_exp
  percentage: float8_comparison_exp
}

"""aggregate max on columns"""
type fn_unsubscribes_by_periods_max_fields {
  count: Int
  interval_label: String
  percentage: float8
}

"""aggregate min on columns"""
type fn_unsubscribes_by_periods_min_fields {
  count: Int
  interval_label: String
  percentage: float8
}

"""
Ordering options when selecting data from "fn_unsubscribes_by_periods".
"""
input fn_unsubscribes_by_periods_order_by {
  count: order_by
  interval_label: order_by
  percentage: order_by
}

"""
select columns of table "fn_unsubscribes_by_periods"
"""
enum fn_unsubscribes_by_periods_select_column {
  """column name"""
  count

  """column name"""
  interval_label

  """column name"""
  percentage
}

"""aggregate stddev on columns"""
type fn_unsubscribes_by_periods_stddev_fields {
  count: Float
  percentage: Float
}

"""aggregate stddev_pop on columns"""
type fn_unsubscribes_by_periods_stddev_pop_fields {
  count: Float
  percentage: Float
}

"""aggregate stddev_samp on columns"""
type fn_unsubscribes_by_periods_stddev_samp_fields {
  count: Float
  percentage: Float
}

"""
Streaming cursor of the table "fn_unsubscribes_by_periods"
"""
input fn_unsubscribes_by_periods_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: fn_unsubscribes_by_periods_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input fn_unsubscribes_by_periods_stream_cursor_value_input {
  count: Int
  interval_label: String
  percentage: float8
}

"""aggregate sum on columns"""
type fn_unsubscribes_by_periods_sum_fields {
  count: Int
  percentage: float8
}

"""aggregate var_pop on columns"""
type fn_unsubscribes_by_periods_var_pop_fields {
  count: Float
  percentage: Float
}

"""aggregate var_samp on columns"""
type fn_unsubscribes_by_periods_var_samp_fields {
  count: Float
  percentage: Float
}

"""aggregate variance on columns"""
type fn_unsubscribes_by_periods_variance_fields {
  count: Float
  percentage: Float
}

"""
columns and relationships of "fn_users_by_period"
"""
type fn_users_by_period {
  count: bigint
  time_bucket: timestamp
}

"""
aggregated selection of "fn_users_by_period"
"""
type fn_users_by_period_aggregate {
  aggregate: fn_users_by_period_aggregate_fields
  nodes: [fn_users_by_period!]!
}

"""
aggregate fields of "fn_users_by_period"
"""
type fn_users_by_period_aggregate_fields {
  avg: fn_users_by_period_avg_fields
  count(columns: [fn_users_by_period_select_column!], distinct: Boolean): Int!
  max: fn_users_by_period_max_fields
  min: fn_users_by_period_min_fields
  stddev: fn_users_by_period_stddev_fields
  stddev_pop: fn_users_by_period_stddev_pop_fields
  stddev_samp: fn_users_by_period_stddev_samp_fields
  sum: fn_users_by_period_sum_fields
  var_pop: fn_users_by_period_var_pop_fields
  var_samp: fn_users_by_period_var_samp_fields
  variance: fn_users_by_period_variance_fields
}

"""aggregate avg on columns"""
type fn_users_by_period_avg_fields {
  count: Float
}

"""
Boolean expression to filter rows from the table "fn_users_by_period". All fields are combined with a logical 'AND'.
"""
input fn_users_by_period_bool_exp {
  _and: [fn_users_by_period_bool_exp!]
  _not: fn_users_by_period_bool_exp
  _or: [fn_users_by_period_bool_exp!]
  count: bigint_comparison_exp
  time_bucket: timestamp_comparison_exp
}

"""aggregate max on columns"""
type fn_users_by_period_max_fields {
  count: bigint
  time_bucket: timestamp
}

"""aggregate min on columns"""
type fn_users_by_period_min_fields {
  count: bigint
  time_bucket: timestamp
}

"""Ordering options when selecting data from "fn_users_by_period"."""
input fn_users_by_period_order_by {
  count: order_by
  time_bucket: order_by
}

"""
select columns of table "fn_users_by_period"
"""
enum fn_users_by_period_select_column {
  """column name"""
  count

  """column name"""
  time_bucket
}

"""aggregate stddev on columns"""
type fn_users_by_period_stddev_fields {
  count: Float
}

"""aggregate stddev_pop on columns"""
type fn_users_by_period_stddev_pop_fields {
  count: Float
}

"""aggregate stddev_samp on columns"""
type fn_users_by_period_stddev_samp_fields {
  count: Float
}

"""
Streaming cursor of the table "fn_users_by_period"
"""
input fn_users_by_period_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: fn_users_by_period_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input fn_users_by_period_stream_cursor_value_input {
  count: bigint
  time_bucket: timestamp
}

"""aggregate sum on columns"""
type fn_users_by_period_sum_fields {
  count: bigint
}

"""aggregate var_pop on columns"""
type fn_users_by_period_var_pop_fields {
  count: Float
}

"""aggregate var_samp on columns"""
type fn_users_by_period_var_samp_fields {
  count: Float
}

"""aggregate variance on columns"""
type fn_users_by_period_variance_fields {
  count: Float
}

input get_avg_user_lifecycle_args {
  tg_channel_ids: _int8
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  execute function "cohort_analysis" which returns "fn_cohort_analysis"
  """
  cohort_analysis(
    """
    input parameters for function "cohort_analysis"
    """
    args: cohort_analysis_args!

    """distinct select on columns"""
    distinct_on: [fn_cohort_analysis_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_cohort_analysis_order_by!]

    """filter the rows returned"""
    where: fn_cohort_analysis_bool_exp
  ): [fn_cohort_analysis!]!

  """
  execute function "cohort_analysis" and query aggregates on result of table type "fn_cohort_analysis"
  """
  cohort_analysis_aggregate(
    """
    input parameters for function "cohort_analysis_aggregate"
    """
    args: cohort_analysis_args!

    """distinct select on columns"""
    distinct_on: [fn_cohort_analysis_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_cohort_analysis_order_by!]

    """filter the rows returned"""
    where: fn_cohort_analysis_bool_exp
  ): fn_cohort_analysis_aggregate!

  """
  fetch data from the table: "fn_cohort_analysis"
  """
  fn_cohort_analysis(
    """distinct select on columns"""
    distinct_on: [fn_cohort_analysis_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_cohort_analysis_order_by!]

    """filter the rows returned"""
    where: fn_cohort_analysis_bool_exp
  ): [fn_cohort_analysis!]!

  """
  fetch aggregated fields from the table: "fn_cohort_analysis"
  """
  fn_cohort_analysis_aggregate(
    """distinct select on columns"""
    distinct_on: [fn_cohort_analysis_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_cohort_analysis_order_by!]

    """filter the rows returned"""
    where: fn_cohort_analysis_bool_exp
  ): fn_cohort_analysis_aggregate!

  """
  fetch data from the table: "fn_get_avg_user_lifecycle"
  """
  fn_get_avg_user_lifecycle(
    """distinct select on columns"""
    distinct_on: [fn_get_avg_user_lifecycle_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_get_avg_user_lifecycle_order_by!]

    """filter the rows returned"""
    where: fn_get_avg_user_lifecycle_bool_exp
  ): [fn_get_avg_user_lifecycle!]!

  """
  fetch aggregated fields from the table: "fn_get_avg_user_lifecycle"
  """
  fn_get_avg_user_lifecycle_aggregate(
    """distinct select on columns"""
    distinct_on: [fn_get_avg_user_lifecycle_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_get_avg_user_lifecycle_order_by!]

    """filter the rows returned"""
    where: fn_get_avg_user_lifecycle_bool_exp
  ): fn_get_avg_user_lifecycle_aggregate!

  """
  fetch data from the table: "fn_unsubscribes_by_links"
  """
  fn_unsubscribes_by_links(
    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_links_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_links_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_links_bool_exp
  ): [fn_unsubscribes_by_links!]!

  """
  fetch aggregated fields from the table: "fn_unsubscribes_by_links"
  """
  fn_unsubscribes_by_links_aggregate(
    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_links_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_links_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_links_bool_exp
  ): fn_unsubscribes_by_links_aggregate!

  """
  fetch data from the table: "fn_unsubscribes_by_periods"
  """
  fn_unsubscribes_by_periods(
    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_periods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_periods_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_periods_bool_exp
  ): [fn_unsubscribes_by_periods!]!

  """
  fetch aggregated fields from the table: "fn_unsubscribes_by_periods"
  """
  fn_unsubscribes_by_periods_aggregate(
    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_periods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_periods_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_periods_bool_exp
  ): fn_unsubscribes_by_periods_aggregate!

  """
  fetch data from the table: "fn_users_by_period"
  """
  fn_users_by_period(
    """distinct select on columns"""
    distinct_on: [fn_users_by_period_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_users_by_period_order_by!]

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): [fn_users_by_period!]!

  """
  fetch aggregated fields from the table: "fn_users_by_period"
  """
  fn_users_by_period_aggregate(
    """distinct select on columns"""
    distinct_on: [fn_users_by_period_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_users_by_period_order_by!]

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): fn_users_by_period_aggregate!

  """
  execute function "get_avg_user_lifecycle" which returns "fn_get_avg_user_lifecycle"
  """
  get_avg_user_lifecycle(
    """
    input parameters for function "get_avg_user_lifecycle"
    """
    args: get_avg_user_lifecycle_args!

    """distinct select on columns"""
    distinct_on: [fn_get_avg_user_lifecycle_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_get_avg_user_lifecycle_order_by!]

    """filter the rows returned"""
    where: fn_get_avg_user_lifecycle_bool_exp
  ): [fn_get_avg_user_lifecycle!]!

  """
  execute function "get_avg_user_lifecycle" and query aggregates on result of table type "fn_get_avg_user_lifecycle"
  """
  get_avg_user_lifecycle_aggregate(
    """
    input parameters for function "get_avg_user_lifecycle_aggregate"
    """
    args: get_avg_user_lifecycle_args!

    """distinct select on columns"""
    distinct_on: [fn_get_avg_user_lifecycle_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_get_avg_user_lifecycle_order_by!]

    """filter the rows returned"""
    where: fn_get_avg_user_lifecycle_bool_exp
  ): fn_get_avg_user_lifecycle_aggregate!

  """
  fetch data from the table: "stat_post"
  """
  stat_post(
    """distinct select on columns"""
    distinct_on: [stat_post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stat_post_order_by!]

    """filter the rows returned"""
    where: stat_post_bool_exp
  ): [stat_post!]!

  """
  fetch aggregated fields from the table: "stat_post"
  """
  stat_post_aggregate(
    """distinct select on columns"""
    distinct_on: [stat_post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stat_post_order_by!]

    """filter the rows returned"""
    where: stat_post_bool_exp
  ): stat_post_aggregate!

  """fetch data from the table: "stat_post" using primary key columns"""
  stat_post_by_pk(pk: bigint!): stat_post

  """
  fetch data from the table: "stat_reaction"
  """
  stat_reaction(
    """distinct select on columns"""
    distinct_on: [stat_reaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stat_reaction_order_by!]

    """filter the rows returned"""
    where: stat_reaction_bool_exp
  ): [stat_reaction!]!

  """
  fetch aggregated fields from the table: "stat_reaction"
  """
  stat_reaction_aggregate(
    """distinct select on columns"""
    distinct_on: [stat_reaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stat_reaction_order_by!]

    """filter the rows returned"""
    where: stat_reaction_bool_exp
  ): stat_reaction_aggregate!

  """fetch data from the table: "stat_reaction" using primary key columns"""
  stat_reaction_by_pk(pk: bigint!): stat_reaction

  """
  fetch data from the table: "stat_user"
  """
  stat_user(
    """distinct select on columns"""
    distinct_on: [stat_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stat_user_order_by!]

    """filter the rows returned"""
    where: stat_user_bool_exp
  ): [stat_user!]!

  """
  fetch aggregated fields from the table: "stat_user"
  """
  stat_user_aggregate(
    """distinct select on columns"""
    distinct_on: [stat_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stat_user_order_by!]

    """filter the rows returned"""
    where: stat_user_bool_exp
  ): stat_user_aggregate!

  """fetch data from the table: "stat_user" using primary key columns"""
  stat_user_by_pk(pk: bigint!): stat_user

  """
  execute function "unsubscribes_by_links" which returns "fn_unsubscribes_by_links"
  """
  unsubscribes_by_links(
    """
    input parameters for function "unsubscribes_by_links"
    """
    args: unsubscribes_by_links_args!

    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_links_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_links_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_links_bool_exp
  ): [fn_unsubscribes_by_links!]!

  """
  execute function "unsubscribes_by_links" and query aggregates on result of table type "fn_unsubscribes_by_links"
  """
  unsubscribes_by_links_aggregate(
    """
    input parameters for function "unsubscribes_by_links_aggregate"
    """
    args: unsubscribes_by_links_args!

    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_links_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_links_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_links_bool_exp
  ): fn_unsubscribes_by_links_aggregate!

  """
  execute function "unsubscribes_by_periods" which returns "fn_unsubscribes_by_periods"
  """
  unsubscribes_by_periods(
    """
    input parameters for function "unsubscribes_by_periods"
    """
    args: unsubscribes_by_periods_args!

    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_periods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_periods_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_periods_bool_exp
  ): [fn_unsubscribes_by_periods!]!

  """
  execute function "unsubscribes_by_periods" and query aggregates on result of table type "fn_unsubscribes_by_periods"
  """
  unsubscribes_by_periods_aggregate(
    """
    input parameters for function "unsubscribes_by_periods_aggregate"
    """
    args: unsubscribes_by_periods_args!

    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_periods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_periods_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_periods_bool_exp
  ): fn_unsubscribes_by_periods_aggregate!

  """
  execute function "user_signups_by_period" which returns "fn_users_by_period"
  """
  user_signups_by_period(
    """
    input parameters for function "user_signups_by_period"
    """
    args: user_signups_by_period_args!

    """distinct select on columns"""
    distinct_on: [fn_users_by_period_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_users_by_period_order_by!]

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): [fn_users_by_period!]!

  """
  execute function "user_signups_by_period" and query aggregates on result of table type "fn_users_by_period"
  """
  user_signups_by_period_aggregate(
    """
    input parameters for function "user_signups_by_period_aggregate"
    """
    args: user_signups_by_period_args!

    """distinct select on columns"""
    distinct_on: [fn_users_by_period_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_users_by_period_order_by!]

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): fn_users_by_period_aggregate!

  """
  execute function "user_unsubscribes_by_period" which returns "fn_users_by_period"
  """
  user_unsubscribes_by_period(
    """
    input parameters for function "user_unsubscribes_by_period"
    """
    args: user_unsubscribes_by_period_args!

    """distinct select on columns"""
    distinct_on: [fn_users_by_period_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_users_by_period_order_by!]

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): [fn_users_by_period!]!

  """
  execute function "user_unsubscribes_by_period" and query aggregates on result of table type "fn_users_by_period"
  """
  user_unsubscribes_by_period_aggregate(
    """
    input parameters for function "user_unsubscribes_by_period_aggregate"
    """
    args: user_unsubscribes_by_period_args!

    """distinct select on columns"""
    distinct_on: [fn_users_by_period_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_users_by_period_order_by!]

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): fn_users_by_period_aggregate!
}

"""
columns and relationships of "stat_post"
"""
type stat_post {
  comments_channels_count: Int!
  comments_messages_count: Int!
  comments_messages_count_1h: Int!
  comments_messages_count_24h: Int!
  comments_users_count: Int!
  forwards: Int!
  link: String!
  media: String!
  message: String!
  pk: bigint!
  reaction_24h: Int!
  reactions_1h: Int!
  tg_channel_id: bigint!
  tg_post_id: bigint!
  timestamp: timestamp!
  total_reactions_count: Int!
  view_24h: Int!
  views: Int!
  views_1h: Int!
}

"""
aggregated selection of "stat_post"
"""
type stat_post_aggregate {
  aggregate: stat_post_aggregate_fields
  nodes: [stat_post!]!
}

"""
aggregate fields of "stat_post"
"""
type stat_post_aggregate_fields {
  avg: stat_post_avg_fields
  count(columns: [stat_post_select_column!], distinct: Boolean): Int!
  max: stat_post_max_fields
  min: stat_post_min_fields
  stddev: stat_post_stddev_fields
  stddev_pop: stat_post_stddev_pop_fields
  stddev_samp: stat_post_stddev_samp_fields
  sum: stat_post_sum_fields
  var_pop: stat_post_var_pop_fields
  var_samp: stat_post_var_samp_fields
  variance: stat_post_variance_fields
}

"""aggregate avg on columns"""
type stat_post_avg_fields {
  comments_channels_count: Float
  comments_messages_count: Float
  comments_messages_count_1h: Float
  comments_messages_count_24h: Float
  comments_users_count: Float
  forwards: Float
  pk: Float
  reaction_24h: Float
  reactions_1h: Float
  tg_channel_id: Float
  tg_post_id: Float
  total_reactions_count: Float
  view_24h: Float
  views: Float
  views_1h: Float
}

"""
Boolean expression to filter rows from the table "stat_post". All fields are combined with a logical 'AND'.
"""
input stat_post_bool_exp {
  _and: [stat_post_bool_exp!]
  _not: stat_post_bool_exp
  _or: [stat_post_bool_exp!]
  comments_channels_count: Int_comparison_exp
  comments_messages_count: Int_comparison_exp
  comments_messages_count_1h: Int_comparison_exp
  comments_messages_count_24h: Int_comparison_exp
  comments_users_count: Int_comparison_exp
  forwards: Int_comparison_exp
  link: String_comparison_exp
  media: String_comparison_exp
  message: String_comparison_exp
  pk: bigint_comparison_exp
  reaction_24h: Int_comparison_exp
  reactions_1h: Int_comparison_exp
  tg_channel_id: bigint_comparison_exp
  tg_post_id: bigint_comparison_exp
  timestamp: timestamp_comparison_exp
  total_reactions_count: Int_comparison_exp
  view_24h: Int_comparison_exp
  views: Int_comparison_exp
  views_1h: Int_comparison_exp
}

"""aggregate max on columns"""
type stat_post_max_fields {
  comments_channels_count: Int
  comments_messages_count: Int
  comments_messages_count_1h: Int
  comments_messages_count_24h: Int
  comments_users_count: Int
  forwards: Int
  link: String
  media: String
  message: String
  pk: bigint
  reaction_24h: Int
  reactions_1h: Int
  tg_channel_id: bigint
  tg_post_id: bigint
  timestamp: timestamp
  total_reactions_count: Int
  view_24h: Int
  views: Int
  views_1h: Int
}

"""aggregate min on columns"""
type stat_post_min_fields {
  comments_channels_count: Int
  comments_messages_count: Int
  comments_messages_count_1h: Int
  comments_messages_count_24h: Int
  comments_users_count: Int
  forwards: Int
  link: String
  media: String
  message: String
  pk: bigint
  reaction_24h: Int
  reactions_1h: Int
  tg_channel_id: bigint
  tg_post_id: bigint
  timestamp: timestamp
  total_reactions_count: Int
  view_24h: Int
  views: Int
  views_1h: Int
}

"""Ordering options when selecting data from "stat_post"."""
input stat_post_order_by {
  comments_channels_count: order_by
  comments_messages_count: order_by
  comments_messages_count_1h: order_by
  comments_messages_count_24h: order_by
  comments_users_count: order_by
  forwards: order_by
  link: order_by
  media: order_by
  message: order_by
  pk: order_by
  reaction_24h: order_by
  reactions_1h: order_by
  tg_channel_id: order_by
  tg_post_id: order_by
  timestamp: order_by
  total_reactions_count: order_by
  view_24h: order_by
  views: order_by
  views_1h: order_by
}

"""
select columns of table "stat_post"
"""
enum stat_post_select_column {
  """column name"""
  comments_channels_count

  """column name"""
  comments_messages_count

  """column name"""
  comments_messages_count_1h

  """column name"""
  comments_messages_count_24h

  """column name"""
  comments_users_count

  """column name"""
  forwards

  """column name"""
  link

  """column name"""
  media

  """column name"""
  message

  """column name"""
  pk

  """column name"""
  reaction_24h

  """column name"""
  reactions_1h

  """column name"""
  tg_channel_id

  """column name"""
  tg_post_id

  """column name"""
  timestamp

  """column name"""
  total_reactions_count

  """column name"""
  view_24h

  """column name"""
  views

  """column name"""
  views_1h
}

"""aggregate stddev on columns"""
type stat_post_stddev_fields {
  comments_channels_count: Float
  comments_messages_count: Float
  comments_messages_count_1h: Float
  comments_messages_count_24h: Float
  comments_users_count: Float
  forwards: Float
  pk: Float
  reaction_24h: Float
  reactions_1h: Float
  tg_channel_id: Float
  tg_post_id: Float
  total_reactions_count: Float
  view_24h: Float
  views: Float
  views_1h: Float
}

"""aggregate stddev_pop on columns"""
type stat_post_stddev_pop_fields {
  comments_channels_count: Float
  comments_messages_count: Float
  comments_messages_count_1h: Float
  comments_messages_count_24h: Float
  comments_users_count: Float
  forwards: Float
  pk: Float
  reaction_24h: Float
  reactions_1h: Float
  tg_channel_id: Float
  tg_post_id: Float
  total_reactions_count: Float
  view_24h: Float
  views: Float
  views_1h: Float
}

"""aggregate stddev_samp on columns"""
type stat_post_stddev_samp_fields {
  comments_channels_count: Float
  comments_messages_count: Float
  comments_messages_count_1h: Float
  comments_messages_count_24h: Float
  comments_users_count: Float
  forwards: Float
  pk: Float
  reaction_24h: Float
  reactions_1h: Float
  tg_channel_id: Float
  tg_post_id: Float
  total_reactions_count: Float
  view_24h: Float
  views: Float
  views_1h: Float
}

"""
Streaming cursor of the table "stat_post"
"""
input stat_post_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: stat_post_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input stat_post_stream_cursor_value_input {
  comments_channels_count: Int
  comments_messages_count: Int
  comments_messages_count_1h: Int
  comments_messages_count_24h: Int
  comments_users_count: Int
  forwards: Int
  link: String
  media: String
  message: String
  pk: bigint
  reaction_24h: Int
  reactions_1h: Int
  tg_channel_id: bigint
  tg_post_id: bigint
  timestamp: timestamp
  total_reactions_count: Int
  view_24h: Int
  views: Int
  views_1h: Int
}

"""aggregate sum on columns"""
type stat_post_sum_fields {
  comments_channels_count: Int
  comments_messages_count: Int
  comments_messages_count_1h: Int
  comments_messages_count_24h: Int
  comments_users_count: Int
  forwards: Int
  pk: bigint
  reaction_24h: Int
  reactions_1h: Int
  tg_channel_id: bigint
  tg_post_id: bigint
  total_reactions_count: Int
  view_24h: Int
  views: Int
  views_1h: Int
}

"""aggregate var_pop on columns"""
type stat_post_var_pop_fields {
  comments_channels_count: Float
  comments_messages_count: Float
  comments_messages_count_1h: Float
  comments_messages_count_24h: Float
  comments_users_count: Float
  forwards: Float
  pk: Float
  reaction_24h: Float
  reactions_1h: Float
  tg_channel_id: Float
  tg_post_id: Float
  total_reactions_count: Float
  view_24h: Float
  views: Float
  views_1h: Float
}

"""aggregate var_samp on columns"""
type stat_post_var_samp_fields {
  comments_channels_count: Float
  comments_messages_count: Float
  comments_messages_count_1h: Float
  comments_messages_count_24h: Float
  comments_users_count: Float
  forwards: Float
  pk: Float
  reaction_24h: Float
  reactions_1h: Float
  tg_channel_id: Float
  tg_post_id: Float
  total_reactions_count: Float
  view_24h: Float
  views: Float
  views_1h: Float
}

"""aggregate variance on columns"""
type stat_post_variance_fields {
  comments_channels_count: Float
  comments_messages_count: Float
  comments_messages_count_1h: Float
  comments_messages_count_24h: Float
  comments_users_count: Float
  forwards: Float
  pk: Float
  reaction_24h: Float
  reactions_1h: Float
  tg_channel_id: Float
  tg_post_id: Float
  total_reactions_count: Float
  view_24h: Float
  views: Float
  views_1h: Float
}

"""
columns and relationships of "stat_reaction"
"""
type stat_reaction {
  pk: bigint!
  reaction_count: Int!
  reaction_emoticon: String!
  reaction_emoticon_code: Int!
  tg_channel_id: bigint!
  tg_post_id: bigint!
  timestamp: timestamp!
}

"""
aggregated selection of "stat_reaction"
"""
type stat_reaction_aggregate {
  aggregate: stat_reaction_aggregate_fields
  nodes: [stat_reaction!]!
}

"""
aggregate fields of "stat_reaction"
"""
type stat_reaction_aggregate_fields {
  avg: stat_reaction_avg_fields
  count(columns: [stat_reaction_select_column!], distinct: Boolean): Int!
  max: stat_reaction_max_fields
  min: stat_reaction_min_fields
  stddev: stat_reaction_stddev_fields
  stddev_pop: stat_reaction_stddev_pop_fields
  stddev_samp: stat_reaction_stddev_samp_fields
  sum: stat_reaction_sum_fields
  var_pop: stat_reaction_var_pop_fields
  var_samp: stat_reaction_var_samp_fields
  variance: stat_reaction_variance_fields
}

"""aggregate avg on columns"""
type stat_reaction_avg_fields {
  pk: Float
  reaction_count: Float
  reaction_emoticon_code: Float
  tg_channel_id: Float
  tg_post_id: Float
}

"""
Boolean expression to filter rows from the table "stat_reaction". All fields are combined with a logical 'AND'.
"""
input stat_reaction_bool_exp {
  _and: [stat_reaction_bool_exp!]
  _not: stat_reaction_bool_exp
  _or: [stat_reaction_bool_exp!]
  pk: bigint_comparison_exp
  reaction_count: Int_comparison_exp
  reaction_emoticon: String_comparison_exp
  reaction_emoticon_code: Int_comparison_exp
  tg_channel_id: bigint_comparison_exp
  tg_post_id: bigint_comparison_exp
  timestamp: timestamp_comparison_exp
}

"""aggregate max on columns"""
type stat_reaction_max_fields {
  pk: bigint
  reaction_count: Int
  reaction_emoticon: String
  reaction_emoticon_code: Int
  tg_channel_id: bigint
  tg_post_id: bigint
  timestamp: timestamp
}

"""aggregate min on columns"""
type stat_reaction_min_fields {
  pk: bigint
  reaction_count: Int
  reaction_emoticon: String
  reaction_emoticon_code: Int
  tg_channel_id: bigint
  tg_post_id: bigint
  timestamp: timestamp
}

"""Ordering options when selecting data from "stat_reaction"."""
input stat_reaction_order_by {
  pk: order_by
  reaction_count: order_by
  reaction_emoticon: order_by
  reaction_emoticon_code: order_by
  tg_channel_id: order_by
  tg_post_id: order_by
  timestamp: order_by
}

"""
select columns of table "stat_reaction"
"""
enum stat_reaction_select_column {
  """column name"""
  pk

  """column name"""
  reaction_count

  """column name"""
  reaction_emoticon

  """column name"""
  reaction_emoticon_code

  """column name"""
  tg_channel_id

  """column name"""
  tg_post_id

  """column name"""
  timestamp
}

"""aggregate stddev on columns"""
type stat_reaction_stddev_fields {
  pk: Float
  reaction_count: Float
  reaction_emoticon_code: Float
  tg_channel_id: Float
  tg_post_id: Float
}

"""aggregate stddev_pop on columns"""
type stat_reaction_stddev_pop_fields {
  pk: Float
  reaction_count: Float
  reaction_emoticon_code: Float
  tg_channel_id: Float
  tg_post_id: Float
}

"""aggregate stddev_samp on columns"""
type stat_reaction_stddev_samp_fields {
  pk: Float
  reaction_count: Float
  reaction_emoticon_code: Float
  tg_channel_id: Float
  tg_post_id: Float
}

"""
Streaming cursor of the table "stat_reaction"
"""
input stat_reaction_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: stat_reaction_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input stat_reaction_stream_cursor_value_input {
  pk: bigint
  reaction_count: Int
  reaction_emoticon: String
  reaction_emoticon_code: Int
  tg_channel_id: bigint
  tg_post_id: bigint
  timestamp: timestamp
}

"""aggregate sum on columns"""
type stat_reaction_sum_fields {
  pk: bigint
  reaction_count: Int
  reaction_emoticon_code: Int
  tg_channel_id: bigint
  tg_post_id: bigint
}

"""aggregate var_pop on columns"""
type stat_reaction_var_pop_fields {
  pk: Float
  reaction_count: Float
  reaction_emoticon_code: Float
  tg_channel_id: Float
  tg_post_id: Float
}

"""aggregate var_samp on columns"""
type stat_reaction_var_samp_fields {
  pk: Float
  reaction_count: Float
  reaction_emoticon_code: Float
  tg_channel_id: Float
  tg_post_id: Float
}

"""aggregate variance on columns"""
type stat_reaction_variance_fields {
  pk: Float
  reaction_count: Float
  reaction_emoticon_code: Float
  tg_channel_id: Float
  tg_post_id: Float
}

"""
columns and relationships of "stat_user"
"""
type stat_user {
  first_name: String
  invite_link: String
  is_joined_by_link: Boolean
  joined_at: timestamp
  last_name: String
  left_at: timestamp
  phone: String
  pk: bigint!
  premium: Boolean
  scam: Boolean
  tg_channel_id: bigint!
  tg_user_id: bigint!
  timestamp: timestamp!
  username: String
  verified: Boolean
}

"""
aggregated selection of "stat_user"
"""
type stat_user_aggregate {
  aggregate: stat_user_aggregate_fields
  nodes: [stat_user!]!
}

"""
aggregate fields of "stat_user"
"""
type stat_user_aggregate_fields {
  avg: stat_user_avg_fields
  count(columns: [stat_user_select_column!], distinct: Boolean): Int!
  max: stat_user_max_fields
  min: stat_user_min_fields
  stddev: stat_user_stddev_fields
  stddev_pop: stat_user_stddev_pop_fields
  stddev_samp: stat_user_stddev_samp_fields
  sum: stat_user_sum_fields
  var_pop: stat_user_var_pop_fields
  var_samp: stat_user_var_samp_fields
  variance: stat_user_variance_fields
}

"""aggregate avg on columns"""
type stat_user_avg_fields {
  pk: Float
  tg_channel_id: Float
  tg_user_id: Float
}

"""
Boolean expression to filter rows from the table "stat_user". All fields are combined with a logical 'AND'.
"""
input stat_user_bool_exp {
  _and: [stat_user_bool_exp!]
  _not: stat_user_bool_exp
  _or: [stat_user_bool_exp!]
  first_name: String_comparison_exp
  invite_link: String_comparison_exp
  is_joined_by_link: Boolean_comparison_exp
  joined_at: timestamp_comparison_exp
  last_name: String_comparison_exp
  left_at: timestamp_comparison_exp
  phone: String_comparison_exp
  pk: bigint_comparison_exp
  premium: Boolean_comparison_exp
  scam: Boolean_comparison_exp
  tg_channel_id: bigint_comparison_exp
  tg_user_id: bigint_comparison_exp
  timestamp: timestamp_comparison_exp
  username: String_comparison_exp
  verified: Boolean_comparison_exp
}

"""aggregate max on columns"""
type stat_user_max_fields {
  first_name: String
  invite_link: String
  joined_at: timestamp
  last_name: String
  left_at: timestamp
  phone: String
  pk: bigint
  tg_channel_id: bigint
  tg_user_id: bigint
  timestamp: timestamp
  username: String
}

"""aggregate min on columns"""
type stat_user_min_fields {
  first_name: String
  invite_link: String
  joined_at: timestamp
  last_name: String
  left_at: timestamp
  phone: String
  pk: bigint
  tg_channel_id: bigint
  tg_user_id: bigint
  timestamp: timestamp
  username: String
}

"""Ordering options when selecting data from "stat_user"."""
input stat_user_order_by {
  first_name: order_by
  invite_link: order_by
  is_joined_by_link: order_by
  joined_at: order_by
  last_name: order_by
  left_at: order_by
  phone: order_by
  pk: order_by
  premium: order_by
  scam: order_by
  tg_channel_id: order_by
  tg_user_id: order_by
  timestamp: order_by
  username: order_by
  verified: order_by
}

"""
select columns of table "stat_user"
"""
enum stat_user_select_column {
  """column name"""
  first_name

  """column name"""
  invite_link

  """column name"""
  is_joined_by_link

  """column name"""
  joined_at

  """column name"""
  last_name

  """column name"""
  left_at

  """column name"""
  phone

  """column name"""
  pk

  """column name"""
  premium

  """column name"""
  scam

  """column name"""
  tg_channel_id

  """column name"""
  tg_user_id

  """column name"""
  timestamp

  """column name"""
  username

  """column name"""
  verified
}

"""aggregate stddev on columns"""
type stat_user_stddev_fields {
  pk: Float
  tg_channel_id: Float
  tg_user_id: Float
}

"""aggregate stddev_pop on columns"""
type stat_user_stddev_pop_fields {
  pk: Float
  tg_channel_id: Float
  tg_user_id: Float
}

"""aggregate stddev_samp on columns"""
type stat_user_stddev_samp_fields {
  pk: Float
  tg_channel_id: Float
  tg_user_id: Float
}

"""
Streaming cursor of the table "stat_user"
"""
input stat_user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: stat_user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input stat_user_stream_cursor_value_input {
  first_name: String
  invite_link: String
  is_joined_by_link: Boolean
  joined_at: timestamp
  last_name: String
  left_at: timestamp
  phone: String
  pk: bigint
  premium: Boolean
  scam: Boolean
  tg_channel_id: bigint
  tg_user_id: bigint
  timestamp: timestamp
  username: String
  verified: Boolean
}

"""aggregate sum on columns"""
type stat_user_sum_fields {
  pk: bigint
  tg_channel_id: bigint
  tg_user_id: bigint
}

"""aggregate var_pop on columns"""
type stat_user_var_pop_fields {
  pk: Float
  tg_channel_id: Float
  tg_user_id: Float
}

"""aggregate var_samp on columns"""
type stat_user_var_samp_fields {
  pk: Float
  tg_channel_id: Float
  tg_user_id: Float
}

"""aggregate variance on columns"""
type stat_user_variance_fields {
  pk: Float
  tg_channel_id: Float
  tg_user_id: Float
}

type subscription_root {
  """
  execute function "cohort_analysis" which returns "fn_cohort_analysis"
  """
  cohort_analysis(
    """
    input parameters for function "cohort_analysis"
    """
    args: cohort_analysis_args!

    """distinct select on columns"""
    distinct_on: [fn_cohort_analysis_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_cohort_analysis_order_by!]

    """filter the rows returned"""
    where: fn_cohort_analysis_bool_exp
  ): [fn_cohort_analysis!]!

  """
  execute function "cohort_analysis" and query aggregates on result of table type "fn_cohort_analysis"
  """
  cohort_analysis_aggregate(
    """
    input parameters for function "cohort_analysis_aggregate"
    """
    args: cohort_analysis_args!

    """distinct select on columns"""
    distinct_on: [fn_cohort_analysis_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_cohort_analysis_order_by!]

    """filter the rows returned"""
    where: fn_cohort_analysis_bool_exp
  ): fn_cohort_analysis_aggregate!

  """
  fetch data from the table: "fn_cohort_analysis"
  """
  fn_cohort_analysis(
    """distinct select on columns"""
    distinct_on: [fn_cohort_analysis_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_cohort_analysis_order_by!]

    """filter the rows returned"""
    where: fn_cohort_analysis_bool_exp
  ): [fn_cohort_analysis!]!

  """
  fetch aggregated fields from the table: "fn_cohort_analysis"
  """
  fn_cohort_analysis_aggregate(
    """distinct select on columns"""
    distinct_on: [fn_cohort_analysis_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_cohort_analysis_order_by!]

    """filter the rows returned"""
    where: fn_cohort_analysis_bool_exp
  ): fn_cohort_analysis_aggregate!

  """
  fetch data from the table in a streaming manner: "fn_cohort_analysis"
  """
  fn_cohort_analysis_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [fn_cohort_analysis_stream_cursor_input]!

    """filter the rows returned"""
    where: fn_cohort_analysis_bool_exp
  ): [fn_cohort_analysis!]!

  """
  fetch data from the table: "fn_get_avg_user_lifecycle"
  """
  fn_get_avg_user_lifecycle(
    """distinct select on columns"""
    distinct_on: [fn_get_avg_user_lifecycle_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_get_avg_user_lifecycle_order_by!]

    """filter the rows returned"""
    where: fn_get_avg_user_lifecycle_bool_exp
  ): [fn_get_avg_user_lifecycle!]!

  """
  fetch aggregated fields from the table: "fn_get_avg_user_lifecycle"
  """
  fn_get_avg_user_lifecycle_aggregate(
    """distinct select on columns"""
    distinct_on: [fn_get_avg_user_lifecycle_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_get_avg_user_lifecycle_order_by!]

    """filter the rows returned"""
    where: fn_get_avg_user_lifecycle_bool_exp
  ): fn_get_avg_user_lifecycle_aggregate!

  """
  fetch data from the table in a streaming manner: "fn_get_avg_user_lifecycle"
  """
  fn_get_avg_user_lifecycle_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [fn_get_avg_user_lifecycle_stream_cursor_input]!

    """filter the rows returned"""
    where: fn_get_avg_user_lifecycle_bool_exp
  ): [fn_get_avg_user_lifecycle!]!

  """
  fetch data from the table: "fn_unsubscribes_by_links"
  """
  fn_unsubscribes_by_links(
    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_links_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_links_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_links_bool_exp
  ): [fn_unsubscribes_by_links!]!

  """
  fetch aggregated fields from the table: "fn_unsubscribes_by_links"
  """
  fn_unsubscribes_by_links_aggregate(
    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_links_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_links_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_links_bool_exp
  ): fn_unsubscribes_by_links_aggregate!

  """
  fetch data from the table in a streaming manner: "fn_unsubscribes_by_links"
  """
  fn_unsubscribes_by_links_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [fn_unsubscribes_by_links_stream_cursor_input]!

    """filter the rows returned"""
    where: fn_unsubscribes_by_links_bool_exp
  ): [fn_unsubscribes_by_links!]!

  """
  fetch data from the table: "fn_unsubscribes_by_periods"
  """
  fn_unsubscribes_by_periods(
    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_periods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_periods_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_periods_bool_exp
  ): [fn_unsubscribes_by_periods!]!

  """
  fetch aggregated fields from the table: "fn_unsubscribes_by_periods"
  """
  fn_unsubscribes_by_periods_aggregate(
    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_periods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_periods_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_periods_bool_exp
  ): fn_unsubscribes_by_periods_aggregate!

  """
  fetch data from the table in a streaming manner: "fn_unsubscribes_by_periods"
  """
  fn_unsubscribes_by_periods_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [fn_unsubscribes_by_periods_stream_cursor_input]!

    """filter the rows returned"""
    where: fn_unsubscribes_by_periods_bool_exp
  ): [fn_unsubscribes_by_periods!]!

  """
  fetch data from the table: "fn_users_by_period"
  """
  fn_users_by_period(
    """distinct select on columns"""
    distinct_on: [fn_users_by_period_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_users_by_period_order_by!]

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): [fn_users_by_period!]!

  """
  fetch aggregated fields from the table: "fn_users_by_period"
  """
  fn_users_by_period_aggregate(
    """distinct select on columns"""
    distinct_on: [fn_users_by_period_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_users_by_period_order_by!]

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): fn_users_by_period_aggregate!

  """
  fetch data from the table in a streaming manner: "fn_users_by_period"
  """
  fn_users_by_period_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [fn_users_by_period_stream_cursor_input]!

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): [fn_users_by_period!]!

  """
  execute function "get_avg_user_lifecycle" which returns "fn_get_avg_user_lifecycle"
  """
  get_avg_user_lifecycle(
    """
    input parameters for function "get_avg_user_lifecycle"
    """
    args: get_avg_user_lifecycle_args!

    """distinct select on columns"""
    distinct_on: [fn_get_avg_user_lifecycle_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_get_avg_user_lifecycle_order_by!]

    """filter the rows returned"""
    where: fn_get_avg_user_lifecycle_bool_exp
  ): [fn_get_avg_user_lifecycle!]!

  """
  execute function "get_avg_user_lifecycle" and query aggregates on result of table type "fn_get_avg_user_lifecycle"
  """
  get_avg_user_lifecycle_aggregate(
    """
    input parameters for function "get_avg_user_lifecycle_aggregate"
    """
    args: get_avg_user_lifecycle_args!

    """distinct select on columns"""
    distinct_on: [fn_get_avg_user_lifecycle_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_get_avg_user_lifecycle_order_by!]

    """filter the rows returned"""
    where: fn_get_avg_user_lifecycle_bool_exp
  ): fn_get_avg_user_lifecycle_aggregate!

  """
  fetch data from the table: "stat_post"
  """
  stat_post(
    """distinct select on columns"""
    distinct_on: [stat_post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stat_post_order_by!]

    """filter the rows returned"""
    where: stat_post_bool_exp
  ): [stat_post!]!

  """
  fetch aggregated fields from the table: "stat_post"
  """
  stat_post_aggregate(
    """distinct select on columns"""
    distinct_on: [stat_post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stat_post_order_by!]

    """filter the rows returned"""
    where: stat_post_bool_exp
  ): stat_post_aggregate!

  """fetch data from the table: "stat_post" using primary key columns"""
  stat_post_by_pk(pk: bigint!): stat_post

  """
  fetch data from the table in a streaming manner: "stat_post"
  """
  stat_post_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [stat_post_stream_cursor_input]!

    """filter the rows returned"""
    where: stat_post_bool_exp
  ): [stat_post!]!

  """
  fetch data from the table: "stat_reaction"
  """
  stat_reaction(
    """distinct select on columns"""
    distinct_on: [stat_reaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stat_reaction_order_by!]

    """filter the rows returned"""
    where: stat_reaction_bool_exp
  ): [stat_reaction!]!

  """
  fetch aggregated fields from the table: "stat_reaction"
  """
  stat_reaction_aggregate(
    """distinct select on columns"""
    distinct_on: [stat_reaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stat_reaction_order_by!]

    """filter the rows returned"""
    where: stat_reaction_bool_exp
  ): stat_reaction_aggregate!

  """fetch data from the table: "stat_reaction" using primary key columns"""
  stat_reaction_by_pk(pk: bigint!): stat_reaction

  """
  fetch data from the table in a streaming manner: "stat_reaction"
  """
  stat_reaction_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [stat_reaction_stream_cursor_input]!

    """filter the rows returned"""
    where: stat_reaction_bool_exp
  ): [stat_reaction!]!

  """
  fetch data from the table: "stat_user"
  """
  stat_user(
    """distinct select on columns"""
    distinct_on: [stat_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stat_user_order_by!]

    """filter the rows returned"""
    where: stat_user_bool_exp
  ): [stat_user!]!

  """
  fetch aggregated fields from the table: "stat_user"
  """
  stat_user_aggregate(
    """distinct select on columns"""
    distinct_on: [stat_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stat_user_order_by!]

    """filter the rows returned"""
    where: stat_user_bool_exp
  ): stat_user_aggregate!

  """fetch data from the table: "stat_user" using primary key columns"""
  stat_user_by_pk(pk: bigint!): stat_user

  """
  fetch data from the table in a streaming manner: "stat_user"
  """
  stat_user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [stat_user_stream_cursor_input]!

    """filter the rows returned"""
    where: stat_user_bool_exp
  ): [stat_user!]!

  """
  execute function "unsubscribes_by_links" which returns "fn_unsubscribes_by_links"
  """
  unsubscribes_by_links(
    """
    input parameters for function "unsubscribes_by_links"
    """
    args: unsubscribes_by_links_args!

    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_links_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_links_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_links_bool_exp
  ): [fn_unsubscribes_by_links!]!

  """
  execute function "unsubscribes_by_links" and query aggregates on result of table type "fn_unsubscribes_by_links"
  """
  unsubscribes_by_links_aggregate(
    """
    input parameters for function "unsubscribes_by_links_aggregate"
    """
    args: unsubscribes_by_links_args!

    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_links_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_links_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_links_bool_exp
  ): fn_unsubscribes_by_links_aggregate!

  """
  execute function "unsubscribes_by_periods" which returns "fn_unsubscribes_by_periods"
  """
  unsubscribes_by_periods(
    """
    input parameters for function "unsubscribes_by_periods"
    """
    args: unsubscribes_by_periods_args!

    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_periods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_periods_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_periods_bool_exp
  ): [fn_unsubscribes_by_periods!]!

  """
  execute function "unsubscribes_by_periods" and query aggregates on result of table type "fn_unsubscribes_by_periods"
  """
  unsubscribes_by_periods_aggregate(
    """
    input parameters for function "unsubscribes_by_periods_aggregate"
    """
    args: unsubscribes_by_periods_args!

    """distinct select on columns"""
    distinct_on: [fn_unsubscribes_by_periods_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_unsubscribes_by_periods_order_by!]

    """filter the rows returned"""
    where: fn_unsubscribes_by_periods_bool_exp
  ): fn_unsubscribes_by_periods_aggregate!

  """
  execute function "user_signups_by_period" which returns "fn_users_by_period"
  """
  user_signups_by_period(
    """
    input parameters for function "user_signups_by_period"
    """
    args: user_signups_by_period_args!

    """distinct select on columns"""
    distinct_on: [fn_users_by_period_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_users_by_period_order_by!]

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): [fn_users_by_period!]!

  """
  execute function "user_signups_by_period" and query aggregates on result of table type "fn_users_by_period"
  """
  user_signups_by_period_aggregate(
    """
    input parameters for function "user_signups_by_period_aggregate"
    """
    args: user_signups_by_period_args!

    """distinct select on columns"""
    distinct_on: [fn_users_by_period_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_users_by_period_order_by!]

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): fn_users_by_period_aggregate!

  """
  execute function "user_unsubscribes_by_period" which returns "fn_users_by_period"
  """
  user_unsubscribes_by_period(
    """
    input parameters for function "user_unsubscribes_by_period"
    """
    args: user_unsubscribes_by_period_args!

    """distinct select on columns"""
    distinct_on: [fn_users_by_period_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_users_by_period_order_by!]

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): [fn_users_by_period!]!

  """
  execute function "user_unsubscribes_by_period" and query aggregates on result of table type "fn_users_by_period"
  """
  user_unsubscribes_by_period_aggregate(
    """
    input parameters for function "user_unsubscribes_by_period_aggregate"
    """
    args: user_unsubscribes_by_period_args!

    """distinct select on columns"""
    distinct_on: [fn_users_by_period_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fn_users_by_period_order_by!]

    """filter the rows returned"""
    where: fn_users_by_period_bool_exp
  ): fn_users_by_period_aggregate!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

input unsubscribes_by_links_args {
  end_date: timestamp
  link_array: _text
  start_date: timestamp
  tg_channel_ids: _int8
}

input unsubscribes_by_periods_args {
  end_date: timestamp
  start_date: timestamp
  tg_channel_ids: _int8
}

input user_signups_by_period_args {
  end_date: timestamp
  start_date: timestamp
  tg_channel_ids: _int8
  time_period: String
}

input user_unsubscribes_by_period_args {
  end_date: timestamp
  start_date: timestamp
  tg_channel_ids: _int8
  time_period: String
}

